//This is a 2048 java recreation with java graphics and a 2d array system

package Gd;

import java.awt.BasicStroke;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

public class GridGame {
  static boolean fmove = true; //first move

  static JFrame frame;
  //random numbers for generating numbers on the board
  static int ranx;
  static int rany;
  //best score
  static int best = 0;

  //screen displayed when you lose

  //constants
  final static int SIZE = 4; //size of board & grid

  final static Color COLOURGRID = new Color(140, 140, 140);
  final static Color COLOURBACK = new Color(240, 240, 240);

  static boolean losing = false; //boolean for if you've lost or not

  static int score = 0; //current score

  //messages for when you lose
  static String losemessage;
  static String losemsg;
  static String msgscore;

  //the board
  int[][] board = new int[SIZE][SIZE];
  JLabel lblStart = new JLabel(); //must be initialized here or in constructor to avoid nullPointer error in initGame().

  public static void main(String[] args) {
    new GridGame();
  }

  GridGame() { //constructor
    initGame();
    createAndShowGUI();
  }

  void initGame() {
    //clear board
    for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j < SIZE; j++) {
        board[i][j] = 0;
      }
    }
    lblStart.setText("2048");
  }

  void createAndShowGUI() {
    frame = new JFrame("wah");
    Container content = frame.getContentPane();
    content.setBackground(Color.BLUE);
    content.setLayout(new BorderLayout(2, 2));

    //setup top label & panel						
    lblStart.setFont(new Font("Dialog", Font.BOLD, 15));
    lblStart.setText("2048");
    lblStart.setHorizontalAlignment(SwingConstants.CENTER);
    lblStart.setBackground(new Color(255, 255, 222));
    lblStart.setOpaque(true);
    content.add(BorderLayout.NORTH, lblStart);

    //make main panel
    DrawingPanel gridPanel = new DrawingPanel();
    content.add(gridPanel, BorderLayout.CENTER);

    //finish setting up the frame
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(600, 650);
    frame.setLocationRelativeTo(null);

    frame.setVisible(true);

  }

  private class DrawingPanel extends JPanel implements KeyListener {

    //instance variables
    int panW, panH; //size of JPanel
    int blockX, blockY; //size of each square

    DrawingPanel() {
      this.addKeyListener(this);
      this.setFocusable(true);
      setBackground(COLOURBACK);

    }

    void initGraphics() {
      //panel size
      panW = 500;
      panH = 400;
      //grid size
      blockX = (int)((panW / SIZE));
      blockY = (int)((panH / SIZE));

    }

    public void paintComponent(Graphics g) {
      super.paintComponent(g); //needed for background colour to paint
      Graphics2D g2 = (Graphics2D) g;
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

      initGraphics(); //needed if the window is resized.

      Font font = new Font("Serif", Font.PLAIN, 40);
      g2.setFont(font);
      g2.drawString("2048!", 150, 0);

      //Draw grid
      //drawing the score board

      g.setColor(new Color(187, 173, 160));
      g.fillRoundRect(30, 5, 200, 70, 10, 10);
      g2.setColor(Color.white);
      g2.setFont(new Font("", Font.PLAIN, 30));
      g2.drawString("Score:", 50, 40);
      g2.setColor(Color.white);
      g2.drawString("" + score, 50, 70);

      g.setColor(new Color(187, 173, 160));
      g.fillRoundRect(270, 5, 200, 70, 10, 10);
      g2.setColor(Color.white);
      g2.setFont(new Font("", Font.PLAIN, 30));
      g2.drawString("Best:", 300, 40);
      g2.setColor(Color.white);
      g2.drawString("" + best, 300, 70);
      g2.setFont(new Font("", Font.PLAIN, 20));
      //the grid
      g.setColor(new Color(187, 173, 160));
      g.fillRoundRect(30, 80, 540, 440, 40, 40);

      g2.setFont(font);
      //drawing the grid and boxes
      for (int i = 0; i < board.length; i++) {

        for (int j = 0; j < board[i].length; j++) {

          g.setColor(new Color(205, 193, 180));
          //boxes
          g.fillRoundRect(i * blockX + 50, j * blockY + 100, blockX - 10, blockY - 10, 20, 20);
        }
      }
      for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[i].length; j++) {
          //all of the different colors for numbers
          if (board[i][j] != 0) {

            g2.setColor(new Color(119, 110, 101));

            if (board[i][j] > 4) {
              g.setColor(new Color(243, 178, 122));

              if (board[i][j] > 8) {
                g.setColor(new Color(246, 150, 100));

                if (board[i][j] > 16) {
                  g.setColor(new Color(247, 124, 95));

                }
                if (board[i][j] > 32) {

                  g.setColor(new Color(247, 95, 59));

                  if (board[i][j] > 64) {
                    g.setColor(new Color(237, 204, 98));
                  }
                }
              }
              //boxes
              g.fillRoundRect(j * blockX + 50, i * blockY + 100, blockX - 10, blockY - 10, 20, 20);

            } else {

              g.setColor(new Color(238, 228, 218));
              g.fillRoundRect(j * blockX + 50, i * blockY + 100, blockX - 10, blockY - 10, 20, 20);
              g2.setColor(new Color(119, 110, 101));
            }
            if (board[i][j] > 4)
              g2.setColor(Color.white);
            g2.drawString("" + board[i][j], (j * blockX) + 95, (i * blockY) + 155);

          }

        }

      }

      if (losing) {
        g.setColor(new Color(211, 211, 211, 170));
        g.fillRoundRect(50, 100, 490, 400, 10, 10);

        g2.setFont(new Font("", 10, 30));
        g.setColor(Color.black);
        g2.drawString(losemessage, 50, 150);
        g2.drawString(losemsg, 50, 250);
        g2.drawString(msgscore, 50, 350);

      }

    }

    @Override
    public void keyTyped(KeyEvent e) {
      // TODO Auto-generated method stub

    }

    @Override
    public void keyPressed(KeyEvent e) {
      //if you haven't moved yet:
      if (fmove) {

        //generating the first number
        int ranx = ((int)(Math.random() * SIZE));
        int rany = ((int)(Math.random() * SIZE));

        while (board[ranx][rany] != 0) {
          ranx = ((int)(Math.random() * SIZE));
          rany = ((int)(Math.random() * SIZE));
        }
        
        if (Math.random()>0.5) {
        
        board[ranx][rany] = 2;
        fmove = false;}
        else {
        board[ranx][rany] = 4;
        fmove = false;}
      }

      if (isfull(board)) {
        if (!haslost(board)) {

          //moving if board is full
          if (e.getKeyCode() == 'W') {

            board = moveup(board);

            this.repaint();

          }
          if (e.getKeyCode() == 'S') {

            board = movedown(board);

            this.repaint();
          }

          if (e.getKeyCode() == 'D') {

            board = moveright(board);

            this.repaint();
          }
          if (e.getKeyCode() == 'A') {

            board = moveleft(board);

          }
          this.repaint();
        }

        // if you lose
        else {

          losemessage = "Game over!";
          losemsg = "Press spacebar to restart! ";
          msgscore = "Final score: " + score;

          losing = true;

          this.repaint();
          if (e.getKeyCode() == ' ') {
            for (int i = 0; i < board.length; i++) {
              for (int j = 0; j < board.length; j++) {
                board[i][j] = 0;
                fmove = true;
                score = 0;
                losemsg = "";
                losemessage = "";
                msgscore = "";

                losing = false;
                this.repaint();
              }

            }
          }

        }
      }
      //moving if board is not full
      else {
        if (e.getKeyCode() == 'W') {

          board = moveup(board);

          this.repaint();

        }
        if (e.getKeyCode() == 'S') {

          board = movedown(board);

          this.repaint();
        }

        if (e.getKeyCode() == 'D') {

          board = moveright(board);

          this.repaint();
        }
        if (e.getKeyCode() == 'A') {

          board = moveleft(board);

        }
        this.repaint();
      }

    }

    @Override
    public void keyReleased(KeyEvent e) {
      // TODO Auto-generated method stub

    }

  }

  public void keyReleased(KeyEvent e) {
    // TODO Auto-generated method stub

  }
  //object for combining numbers
  static void combine(int[][] i, int x, int y, int j, int k) {
    if (i[x][y] == i[j][k]) {
      i[x][y] *= 2;
      score += i[x][y];

      if (best < score) {
        best = score;
      }
      i[j][k] = 0;
    }

  }
  //moving left
  static int[][] moveleft(int[][] b) {
    int[][] i = b;
    int saving = 0;
    boolean hasmoved = false;
    for (int n = 0; n < i.length; n++) {

      for (int m = 0; m < i[0].length; m++) {

        saving = m - 1;
        if (i[n][m] != 0 & m > 0) {

          while (saving > 0 & i[n][saving] == 0) {

            saving -= 1;
          }

          if (i[n][saving] > 0 & i[n][saving] != i[n][m]) {

            if (i[n][saving + 1] == 0 & saving + 1 != i[n].length) {

              i[n][saving + 1] = i[n][m];

              i[n][m] = 0;

              hasmoved = true;

            }

          } else if (i[n][saving] == i[n][m] & saving + 1 != i[n].length) {

            combine(i, n, saving, n, m);
            hasmoved = true;

          } else if (saving == 0) {

            i[n][saving] = i[n][m];
            i[n][m] = 0;
            hasmoved = true;

          }

        }

      }

    }
    //generating a number
    if ((hasmoved & !isfull(i)) | fmove) {
      int ranx = ((int)(Math.random() * SIZE));
      int rany = ((int)(Math.random() * SIZE));

      while (i[ranx][rany] != 0) {
        ranx = ((int)(Math.random() * SIZE));
        rany = ((int)(Math.random() * SIZE));
      }
      if (Math.random()>0.5) {
      i[ranx][rany] = 2;
      fmove = false;}
      else {
    	  i[ranx][rany] = 4;
          fmove = false;  
    	  
      }
    }

    return i;
  }
  //moving up
  static int[][] moveup(int[][] b) {
    boolean hasmoved = false;
    int[][] i = b;
    int saving = 0;

    for (int m = 0; m < i[0].length; m++) {
      for (int n = 0; n < i.length; n++) {

        if (i[n][m] != 0 & n != 0) {
          saving = n - 1;

          while (saving > 0 & i[saving][m] == 0) {
            saving -= 1;

          }

          if (i[saving][m] != 0) {
            if (i[saving][m] == i[n][m]) {
              combine(i, saving, m, n, m);
              hasmoved = true;

            } else if (i[saving + 1][m] == 0) {
              i[saving + 1][m] = i[n][m];
              i[n][m] = 0;
              hasmoved = true;

            }
          } else if (saving == 0 & i[saving][m] == 0) {
            i[saving][m] = i[n][m];
            i[n][m] = 0;
            hasmoved = true;

          }

        }
      }

    }
    //generating a number
    if ((hasmoved & !isfull(i)) | fmove) {
      int ranx = ((int)(Math.random() * SIZE));
      int rany = ((int)(Math.random() * SIZE));

      while (i[ranx][rany] != 0) {
        ranx = ((int)(Math.random() * SIZE));
        rany = ((int)(Math.random() * SIZE));
      }

      if (Math.random()>0.5) {
          i[ranx][rany] = 2;
          fmove = false;}
          else {
        	  i[ranx][rany] = 4;
              fmove = false;  
        	  
          }
    }
    return i;
  }
  //moving right
  static int[][] moveright(int[][] b) {
    int[][] i = b;
    int saving = 0;
    boolean hasmoved = false;
    for (int n = i.length - 1; n >= 0; n--) {

      for (int m = i[0].length - 1; m >= 0; m--) {

        saving = m + 1;

        if (i[n][m] != 0 & m + 1 < i[0].length) {

          while (i[n][saving] == 0 & saving < i[0].length - 1) {

            saving += 1;
          }
          if (i[n][saving] != 0) {

            if (i[n][saving] == i[n][m]) {

              combine(i, n, saving, n, m);
              hasmoved = true;

            } else if (i[n][saving - 1] == 0) {
              hasmoved = true;

              i[n][saving - 1] = i[n][m];
              i[n][m] = 0;
            }
          } else if (saving == i[0].length - 1 & i[n][saving] == 0) {
            hasmoved = true;

            i[n][saving] = i[n][m];
            i[n][m] = 0;

          }

        }

      }

    }
    //generating a number
    if ((hasmoved & !isfull(i)) | fmove) {
      int ranx = ((int)(Math.random() * SIZE));
      int rany = ((int)(Math.random() * SIZE));

      while (i[ranx][rany] != 0) {
        ranx = ((int)(Math.random() * SIZE));
        rany = ((int)(Math.random() * SIZE));
      }

      if (Math.random()>0.5) {
          i[ranx][rany] = 2;
          fmove = false;}
          else {
        	  i[ranx][rany] = 4;
              fmove = false;  
        	  
          }
    }
    return i;
  }
  //moving down
  static int[][] movedown(int[][] b) {
    int[][] i = b;
    int saving = 0;
    boolean hasmoved = false;

    for (int m = i[0].length - 1; m >= 0; m--) {
      for (int n = i.length - 1; n >= 0; n--) {

        if (i[n][m] != 0 & n + 1 != i.length) {
          saving = n + 1;

          while (saving < i.length - 1 & i[saving][m] == 0) {
            saving += 1;

          }

          if (i[saving][m] != 0) {

            if (i[saving][m] == i[n][m]) {
              combine(i, saving, m, n, m);
              hasmoved = true;

            } else if (i[saving - 1][m] == 0) {
              i[saving - 1][m] = i[n][m];
              i[n][m] = 0;
              hasmoved = true;

            }
          } else if (saving == i.length - 1 & i[saving][m] == 0) {
            i[saving][m] = i[n][m];
            i[n][m] = 0;
            hasmoved = true;

          }

        }
      }

    }
    //generating a number
    if ((hasmoved & !isfull(i)) | fmove) {
      int ranx = ((int)(Math.random() * SIZE));
      int rany = ((int)(Math.random() * SIZE));

      while (i[ranx][rany] != 0) {
        ranx = ((int)(Math.random() * SIZE));
        rany = ((int)(Math.random() * SIZE));
      }

      if (Math.random()>0.5) {
          i[ranx][rany] = 2;
          fmove = false;}
          else {
        	  i[ranx][rany] = 4;
              fmove = false;  
        	  
          }
    }

    return i;
  }
  //logic for checking if the player has lost/game over
  static boolean haslost(int[][] i) {
    boolean lost = true;
    for (int n = 0; n < i.length - 1; n++) {
      for (int m = 0; m < i.length - 1; m++) {

        if (n > 0) {
          if (i[n][m] == i[n - 1][m]) {
            lost = false;
          }

        }
        if (n < i.length) {
          if (i[n][m] == i[n + 1][m]) {
            lost = false;
          }

        }

        if (m > 0) {
          if (i[n][m] == i[n][m - 1]) {
            lost = false;
          }

        }
        if (m < i[n].length - 1) {
          if (i[n][m] == i[n][m + 1]) {
            lost = false;
          }

        }
      }

    }
    return lost;
  }
  // if the board is full
  static boolean isfull(int[][] i) {
    boolean full = true;

    for (int x = 0; x < i.length; x++) {
      for (int y = 0; y < i[x].length; y++) {
        if (i[x][y] == 0) {
          full = false;
        }

      }

    }
    return full;

  }

}

//******************* MouseListener methods *****************//

//end of DrawingPanel class
